#textdomain wesnoth-ReturntoNoelren

#ifdef LSB_COMMENT

Macros for maps and scenario behavior

============= rev History ============
0.0.1 set-up
#endif

# =================== sides utils ==================

# --- std side for the heroes
#define RTN_STDTISIDE
#context:[side]
        id=Tiomen
        name= "Tiomen"
        unrenamable=yes
        side=1
        canrecruit=yes
        controller=human
		recruit=""
		income=0
        team_name=hero
        user_team_name={RTN_USTR-120}
#enddef

# --- std side for orc army
#define LSB_ORCSIDE1 SIDENUM LEADER_NAME GOLDPIECES
    [side]
        type=Orcish Warrior
        id={LEADER_NAME}
        name={LEADER_NAME}
        side={SIDENUM}
        canrecruit=yes
        recruit=Orcish Warrior,Orcish Grunt,Goblin Knight,Troll,Troll Warrior
        team_name=orcs
        user_team_name={RTN_USTR-121}
        gold={GOLDPIECES}
		{INCOME 2 10 20}
        [ai]
            recruitment_pattern=scout,scout,fighter,fighter
            {ATTACK_DEPTH 1 3 5}
        [/ai]

        #make the AI a lot more aggressive at night
        [ai]
            time_of_day=dusk,first_watch,second_watch
            aggression=0.75
            caution=0
            grouping=no
        [/ai]		
    [/side]
#enddef

# --- dummy side for the intro
#define RTN_DUMMYSIDE NUM
	[side]
        id=DUMMY{NUM}
        type=Orcish Warrior
        side={NUM}
        canrecruit=yes
        controller=human
		recruit=""
		income=0
        team_name=hero{NUM}
        user_team_name={RTN_USTR-120}
    [/side]
#enddef

# =================== Death and lose conditions ==================

# ------ General event triggered by the death of an "hero". Use LSB_MAKEHERO to set up the status flag.

#define RTN_HERODEATH
# context:[scenario]
	[event]
		name=die
		first_time_only=no
		[filter_condition]
			[variable]
				name=unit.status.isHero
				boolean_equals=yes
			[/variable]
		[/filter_condition]
		[if]
			[variable]
				name=unit.race
				equals=animal
			[/variable]
			[or]
				[variable]
					name=unit.race
					equals=monster
				[/variable]
			[/or]
			[then]
				{LSB_DIAL $unit.id {RTN_USTR-122}}
			[/then]
			[else]
				{LSB_DIAL $unit.id {RTN_USTR-123}}
			[/else]
		[/if]
		[endlevel]
			result=defeat
		[/endlevel]
	[/event]
#enddef

#define RTN_STDOBJECTIVES
	[objective]
		description={RTN_USTR-126}
		condition=lose
	[/objective]
	[objective]
		description={RTN_USTR-127}
		condition=lose
	[/objective]
#enddef

# ========== Fungites & Shroomstools ============

# --- These special units work together using a new turn event which must be incorporated in the scenario
#define RTN_CREATEFUNGITE SIDE PLACE
		[unit]
			type=RTN_Fungite
			side={SIDE}
			{PLACE}
			[variables]
				avance=7
			[/variables]			
		[/unit]
#enddef

#define RTN_CREATESPORE SIDE X Y
		[set_variables]
			name=G_spores
			mode=append
			[value]
				x={X}
				y={Y}
				side={SIDE}
			[/value]
		[/set_variables]
		[item]
			x,y={X},{Y}
			image=items/spore.png
		[/item]			
#enddef

#define RTN_SPAWNSPORES X Y SIDE HOWMANY
		[store_locations]
			variable=tps
			x,y={X},{Y}
			radius=1
			[not]
				terrain=M*^Xm,D*,Wo*,Q*,X*
			[/not]
		[/store_locations]
		[set_variable]
			name=j
			value={HOWMANY}
		[/set_variable]
		{FOREACH tps k}
			[if]
				[variable]
					name=j
					greater_than=0
				[/variable]
				[then]
					{RTN_CREATESPORE {SIDE} $tps[$k].x $tps[$k].y}
					[set_variable]
						name=j
						add=-1
					[/set_variable]
				[/then]
			[/if]
		{NEXT k}
		{CLEAR_VARIABLE j,tps}						
#enddef

#define RTN_FUNGITEVENT
#	[event]
#		name=new turn
#		first_time_only=no
# manage spores
		{FOREACH G_spores i}
			[scroll_to]
				x,y=$G_spores[$i].x,$G_spores[$i].y
				check_fogged=yes
			[/scroll_to]
			[remove_item]
				x,y=$G_spores[$i].x,$G_spores[$i].y
			[/remove_item]
			{RTN_CREATEFUNGITE $G_spores[$i].side (x,y=$G_spores[$i].x,$G_spores[$i].y)}
		{NEXT i}
		{CLEAR_VARIABLE G_spores}
		
# manage shroomstools
		[store_unit]
			[filter]
				type=RTN_Shroomstool
			[/filter]
			variable=shroom
			kill=no
		[/store_unit]
		{FOREACH shroom i}
			[if]
				[variable]
					name=shroom[$i].variables.avance
					greater_than=0
				[/variable]
				[then]
					[set_variable]
						name=shroom[$i].variables.avance
						add=-1
					[/set_variable]
					[unstore_unit]
						variable=shroom[$i]
					[/unstore_unit]
				[/then][else]
					[kill]
						id=$shroom[$i].id
						animate=yes
					[/kill]
					[harm_unit]
						[filter]
							[filter_adjacent]
								id=$shroom[$i].id
								is_enemy=yes
							[/filter_adjacent]
						[/filter]
						amount=15
						poisoned=yes
						slowed=yes
					[/harm_unit]
					#spawning spores
					{RTN_SPAWNSPORES $shroom[$i].x $shroom[$i].y $shroom[$i].side 3}
				[/else]
			[/if]
		{NEXT i}
		
# manage Fungites
		[store_unit]
			[filter]
				type=RTN_Fungite
			[/filter]
			variable=shroom
			kill=no
		[/store_unit]
		{FOREACH shroom i}
			[if]
				[variable]
					name=shroom[$i].variables.avance
					greater_than=0
				[/variable]
				[then]
					[set_variable]
						name=shroom[$i].variables.avance
						add=-1
					[/set_variable]
					[unstore_unit]
						variable=shroom[$i]
					[/unstore_unit]
				[/then][else]
					[set_variable]
						name=shrcnt
						rand=5..8
					[/set_variable]
					[set_variable]
						name=shroom[$i].variables.avance
						value=$shrcnt
					[/set_variable]
					[unstore_unit]
						variable=shroom[$i]
					[/unstore_unit]
					[transform_unit]
						id=$shroom[$i].id
						transform_to=RTN_Shroomstool
					[/transform_unit]						
				[/else]
			[/if]
		{NEXT i}
		{CLEAR_VARIABLE shroom,shrcnt}
#	[/event]
#enddef

# =================== Animations ==================

#ifdef LSB_COMMENT
	LSB_GLOUPKILL MSG
This macro kills units stored in the 'to_kill' array, with animation and message
#endif

#define LSB_GLOUPKILL MSG
	{FOREACH to_kill i}
		[scroll_to_unit]
			id=$to_kill[$i].id
		[/scroll_to_unit]
		[animate_unit]
			[filter]
				id=$to_kill[$i].id
			[/filter]
			flag=death
			hits=no
			text={MSG}
			red=255
			green=0
			blue=0
		[/animate_unit]
		[kill]
			id=$to_kill[$i].id
			animate=no
			fire_event=yes
		[/kill]
	{NEXT i}
	{CLEAR_VARIABLE to_kill}	
#enddef

# --- Fire animation for bombs and village burning.
#define RTN_BOMBANIM X Y
# context: [event]
		[remove_item]
			x,y={X},{Y}
		[/remove_item]
		[item]
			x,y={X},{Y}
			halo="halo/flame-burst-1.png:140,halo/flame-burst-2.png:140,halo/flame-burst-3.png:140,halo/flame-burst-4.png:140,halo/flame-burst-5.png:140,halo/flame-burst-6.png:140,halo/flame-burst-7.png:140,halo/flame-burst-8.png:140,misc/blank-hex.png:2000"
        [/item]
		[delay]
			time=800
		[/delay]
		[remove_item]
			x,y={X},{Y}
		[/remove_item]
#enddef

# --- Campfires
#define RTN_CAMPFIRE XY
	[item]
		{XY}
		halo=scenery/fire1.png:100,scenery/fire2.png:100,scenery/fire3.png:100,scenery/fire4.png:100,scenery/fire5.png:100,scenery/fire6.png:100,scenery/fire7.png:100,scenery/fire8.png:100
	[/item]
#enddef

# --- Dancing naiades, needs nai-1.png to 4
# context: [event]
#define LSB_NAIADE X Y
	[item]
		x,y={X},{Y}
		halo=anims/nai-3.png:500,anims/nai-2.png:500,anims/nai-3.png:500,anims/nai-2.png:500,anims/nai-1.png:700,anims/nai-2.png:500,anims/nai-3.png:500,anims/nai-4.png:300,anims/nai-3.png~FL():500,anims/nai-2.png~FL():500,anims/nai-3.png~FL():500,anims/nai-2.png~FL():500,anims/nai-1.png~FL():700,anims/nai-2.png~FL():500,anims/nai-3.png~FL():500,anims/nai-4.png~FL():300
	[/item]
#enddef
#define LSB_NAIADE_LEFT X Y
	[item]
		x,y={X},{Y}
		halo=anims/nai-3.png:500,anims/nai-1.png:1000,anims/nai-2.png:500,anims/nai-3.png:400,anims/nai-4.png~FL():300,anims/nai-2.png~FL():500,anims/nai-1.png~FL():500,anims/nai-1.png:500
	[/item]
#enddef
#define LSB_NAIADE_RIGHT X Y
	[item]
		x,y={X},{Y}
		halo=anims/nai-3.png:500,anims/nai-1.png:1000~FL(),anims/nai-2.png~FL():500,anims/nai-3.png~FL():400,anims/nai-4.png:300,anims/nai-2.png:500,anims/nai-1.png:500,anims/nai-1.png~FL():500
	[/item]
#enddef

# --- from Bad Moon Rising: a snow storm all over the map.
# context [scenario], needs storm-x.png in images/terrain/ folder
#define BMR_STORM
	[terrain_graphics]
	map="
1
"
	    [tile]
	    pos=1
	    [/tile]
	    [image]
		position=horizontal
		layer=1000
		name=storm-1.png:100,storm-2.png:100,storm-3.png:100,storm-4.png:100
	    [/image]
	    no_flag="storm"
	    set_flag="storm"

	    probability=100
	[/terrain_graphics]
#enddef

# ============ Terrain modifications ============

#------------- Bombs ------------

# --- Bombs explode at the end of turn, this macro should be used only via the special menus.
# Bombs explosion triggers a custom event named 'bombCollat' which can be defined or not in the scenario.

#define RTN_BOMBEXPLOSION
[event]
	name=side turn end
	first_time_only=no
	[filter_condition]
		[variable]
			name=bombs.length
			greater_than=0
		[/variable]
	[/filter_condition]
	# animation
    {FOREACH bombs i}
		[scroll_to]
			x=$bombs[$i].x
			y=$bombs[$i].y
		[/scroll_to]		
		[terrain]
			x=$bombs[$i].x
			y=$bombs[$i].y
			radius=1
			terrain="Gbz"
		[/terrain]
		{RTN_BOMBANIM $bombs[$i].x $bombs[$i].y}
		[kill]
			[filter_location]
				x=$bombs[$i].x
				y=$bombs[$i].y
				radius=2
			[/filter_location]
			animate=yes
			fire_event=yes
		[/kill]
		[terrain]
			x=$bombs[$i].x
			y=$bombs[$i].y
			radius=1
			terrain="Dd"
		[/terrain]
		[terrain]
			x=$bombs[$i].x
			y=$bombs[$i].y
			terrain="Dd^Dc"
		[/terrain]
		[redraw]
		[/redraw]
		[harm_unit]
			[filter]
				[filter_location]
					x=$bombs[$i].x
					y=$bombs[$i].y
					radius=3
				[/filter_location]
			[/filter]
			amount=20
			damage_type=fire
			fire_event=yes
			animate=no
		[/harm_unit]
		[harm_unit]
			[filter]
				[filter_location]
					x=$bombs[$i].x
					y=$bombs[$i].y
					radius=4
				[/filter_location]
			[/filter]
			amount=10
			damage_type=fire
			fire_event=yes
			animate=yes
		[/harm_unit]
    {NEXT i}	
	{CLEAR_VARIABLE bombs}
# --- Hook to collateral effects
		[fire_event]
			name=bombCollat
		[/fire_event]
[/event]
#enddef

#define RTN_HELLCASTLE LOC CNT SIDE
#ifdef LSB_COMMENT
A new castle rises in the middle of a volcano.
LOC is it's location (as x,y)
CNT is a discriminator in case you use this macro more than once
This fires an event named "hellCastle_{CNT}" when the keep is ready (it should probably be populated then).
 usage: 
[event]
	...
	{RTN_HELLCASTLE (10,10) 1 3}
	...
[/event]
#endif

	{EARTHQUAKE (	
	[scroll_to]
		x,y={LOC}
	[/scroll_to]
	)}
	[terrain]
		x,y={LOC}
		terrain=Mv
	[/terrain]
	[redraw][/redraw]
	[store_locations]
		[filter_adjacent_location]
			x,y={LOC}
		[/filter_adjacent_location]
		variable=hellCastle_{CNT}
	[/store_locations]
	
	# --- next turn this shall be executed
	[event]
		name=side {SIDE} turn
		delayed_variable_substitution=no
		[scroll_to]
			x,y={LOC}
		[/scroll_to]
		{EARTHQUAKE (
			[terrain]
				x,y={LOC}
				terrain=Ql
			[/terrain]
			[terrain]
				terrain=Ql
				find_in=hellCastle_{CNT}
			[/terrain]
		)}
		[kill]
			[filter_location]
				find_in=hellCastle_{CNT}
			[/filter_location]
			animate=yes
		[/kill]
		[item]
			x,y={LOC}
			halo="scenery/hellCastle.png"
		[/item]
		
		[event]
			name=side {SIDE} turn
			delayed_variable_substitution=no
			[scroll_to]
				x,y={LOC}
			[/scroll_to]
			[terrain]
				x,y={LOC}
				terrain=Khr
			[/terrain]
			[remove_item]
				x,y={LOC}
			[/remove_item]
			[redraw]
			[/redraw]
			[fire_event]
				name=hellCastle_{CNT}
			[/fire_event]
			[event]
				name= side {SIDE} turn
				[terrain]
					find_in=hellCastle_{CNT}
					terrain=Chr
				[/terrain]
				{CLEAR_VARIABLE hellCastle_{CNT}}
			[/event]
		[/event]
	[/event]
#enddef

# --- Simple flood macro
# This macro modifies maps, replacing FLDED terrains with FLOW terrain.
# The process begins from a location array created first, then extends to adjacent hexes.

#define LSB_FLOOD FLDED FLOW FLOC FUNITS STEP EVNAME

# FLDED: a comma separated list of terrains; use parenthesis and don't include the replacing terrain !.
# FLOW: the replacing terrain.
# FLOC: array name, holding the currently flooded terrains
# FUNITS: array name: will hold units hit by the flood
# STEP: how much iterations to make on each execution.
# EVNAME: name of a custom event to fire on each step

# context: include in an event.

		{REPEAT {STEP} (
			[store_locations]
				[filter_adjacent_location]
					find_in={FLOC}
				[/filter_adjacent_location]
				terrain={FLDED}
				variable={FLOC}
			[/store_locations]
			[terrain]
				find_in={FLOC}
				terrain={FLOW}
			[/terrain]
			[store_unit]
				[filter]
					[filter_location]
						find_in={FLOC}
					[/filter_location]
				[/filter]
				variable={FUNITS}
			[/store_unit]
			[redraw][/redraw]
			[fire_event]
				name = {EVNAME}
			[/fire_event]
		) }	
#enddef

#define LSB_FLOODS FLDED FLOW FLOC STEP

# FLDED: a comma separated list of terrains; use parenthesis and don't include the replacing terrain !.
# FLOW: the replacing terrain.
# FLOC: array name, holding the currently flooded terrains
# STEP: how much iterations to make on each execution.

# context: include in an event.

		{REPEAT {STEP} (
			[store_locations]
				[filter_adjacent_location]
					find_in={FLOC}
				[/filter_adjacent_location]
				terrain={FLDED}
				variable={FLOC}
			[/store_locations]
			[terrain]
				find_in={FLOC}
				terrain={FLOW}
			[/terrain]
			[redraw][/redraw]
		) }	
#enddef

#define RTN_SETBURN X Y
# --- start the fire
		[store_locations]
			find_in=incendie
			[or]
				x,y={X},{Y}
			[/or]
			variable=incendie
		[/store_locations]
		[item]
			x,y={X},{Y}
			halo=scenery/lit1.png:100,scenery/lit3.png:100,scenery/lit5.png:100,scenery/lit7.png:100
		[/item]					
#enddef

#define RTN_BURNHALO
#	halo=scenery/flame1.png:100,scenery/flame2.png:100,scenery/flame3.png:100,scenery/flame4.png:100,scenery/flame5.png:100,scenery/flame6.png:100,scenery/flame7.png:100,scenery/flame8.png:100
	halo=scenery/fire-big-A01.png:140,scenery/fire-big-A02.png:140,scenery/fire-big-A03.png:140,scenery/fire-big-A04.png:140,scenery/fire-big-A05.png:140,scenery/fire-big-A06.png:140,scenery/fire-big-A07.png:140,scenery/fire-big-A08.png:140
#enddef

# --- Burning terrain. This macro is common to the next ones.
# From start point, the fire spreads to adjacent locations provided they are in the set of INFLAM terrains.
# Fire is impassable and units caught in are killed.

#define LSB_INCENDIE INFLAM BURNT
	[event]
		name= new turn
		first_time_only=no
#		delayed_variable_substitution=no
		[if]
			[variable]
				name=tmp_fire
				greater_than=0
			[/variable]
		[then]

# --- stop flame anims on the already burnt terrain
			{FOREACH incend0 indice}
				[remove_item]
					x,y=$incend0[$indice].x,$incend0[$indice].y
				[/remove_item]
			{NEXT indice}
# --- replace with hot terrain
			[terrain]
				terrain=Gbz
				find_in=incend0
			[/terrain]

			[terrain]
				terrain={BURNT}
				find_in=incend1
			[/terrain]
			
			[set_variables]
				name=incend1
				to_variable=incend0
				mode=replace
			[/set_variables]
			
			[clear_variable]
				name=incend2
			[/clear_variable]			
			[terrain]
				terrain=Gbz
				find_in=incendie
				layer=base
			[/terrain]

			{FOREACH incendie indice}
				[store_locations]
					find_in=incend2
					[or]
						[filter_adjacent_location]
							x,y=$incendie[$indice].x,$incendie[$indice].y
						[/filter_adjacent_location]
						terrain={INFLAM}
					[/or]
					variable=incend2
				[/store_locations]
				[item]
					x,y=$incendie[$indice].x,$incendie[$indice].y
					{RTN_BURNHALO}
				[/item]
				# kill the units taken in the flames
				[if]
					[have_unit]
						x,y=$incendie[$indice].x,$incendie[$indice].y
					[/have_unit]
					[then]
						[scroll_to]
							x,y=$incendie[$indice].x,$incendie[$indice].y
						[/scroll_to]
						[kill]
							x,y=$incendie[$indice].x,$incendie[$indice].y
							animate=yes
							fire_event=yes
						[/kill]
					[/then]
				[/if]
			{NEXT indice}
			
# --- prepare the next turn
			[set_variables]
				name=incend0
				to_variable=incendie
				mode=replace
			[/set_variables]
			
			[set_variables]
				name=incendie
				to_variable=incend2
				mode=replace
			[/set_variables]

# --- is all done ?
			[if]
				[variable]
					name=incend1.length
					equals=0
				[/variable]
				[and]
					[variable]
						name=incend0.length
						equals=0
					[/variable]
				[/and]
				[and]
					[variable]
						name=incendie.length
						equals=0
					[/variable]
				[/and]
				[then]
				[set_variable]
					name=tmp_fire
					sub=1
				[/set_variable]
				[/then]
			[/if]
		[/then]
		[/if]
	[/event]
#enddef

#define RTN_INCENDTURN INFLAM BURNT
# INFLAM: a list of inflammable terrains
# BURNT: the final burnt terrain (not in the former list !)
# context: new turn event

# --- stop flame anims on the already burnt terrain
			{FOREACH incend0 indice}
				[remove_item]
					x,y=$incend0[$indice].x,$incend0[$indice].y
				[/remove_item]
			{NEXT indice}

# --- replace with hot terrain
			[terrain]
				terrain=Gbz
				find_in=incend0
			[/terrain]

			[terrain]
				terrain={BURNT}
				find_in=incend1
			[/terrain]
			
			[set_variables]
				name=incend1
				to_variable=incend0
				mode=replace
			[/set_variables]
			
			[clear_variable]
				name=incend2
			[/clear_variable]			
			[terrain]
				terrain=Gbz
				find_in=incendie
				layer=base
			[/terrain]

			{FOREACH incendie indice}
				[store_locations]
					find_in=incend2
					[or]
						[filter_adjacent_location]
							x,y=$incendie[$indice].x,$incendie[$indice].y
						[/filter_adjacent_location]
						terrain={INFLAM}
					[/or]
					variable=incend2
				[/store_locations]
				[item]
					x,y=$incendie[$indice].x,$incendie[$indice].y
					{RTN_BURNHALO}
				[/item]
				# kill the units taken in the flames
				[if]
					[have_unit]
						x,y=$incendie[$indice].x,$incendie[$indice].y
					[/have_unit]
					[then]
						[scroll_to]
							x,y=$incendie[$indice].x,$incendie[$indice].y
						[/scroll_to]
						[kill]
							x,y=$incendie[$indice].x,$incendie[$indice].y
							animate=yes
							fire_event=yes
						[/kill]
					[/then]
				[/if]
			{NEXT indice}
			
# --- prepare the next turn
			[set_variables]
				name=incend0
				to_variable=incendie
				mode=replace
			[/set_variables]
			
			[set_variables]
				name=incendie
				to_variable=incend2
				mode=replace
			[/set_variables]
#enddef

# --- Crafting storm tridents
#define RTN_TRIDENT_SHOP X Y COUNTER
    [event]
        name=moveto
        first_time_only=no
		delayed_variable_substitution=no
		[filter]
			side=1
			x,y={X},{Y}
			[and]
				race=merman
				[or]
					id=Wulfie
				[/or]
			[/and]
		[/filter]
        [filter_condition]
			[variable]
				name={COUNTER}
				greater_than=0
			[/variable]
        [/filter_condition]
		[message]
			speaker=narrator
			image="wesnoth-icon.png"
			message={RTN_USTR-102}
			[option]
				message={RTN_USTR-103}
				[command]
					[object]
						{LSB_STORM_TRIDENT}
					[/object]
					[set_variable]
						name={COUNTER}
						sub=1
					[/set_variable]
					[if]
						[variable]
							name={COUNTER}
							less_than=1
						[/variable]
						[then]
							[remove_item]
								x={X}
								y={Y}
							[/remove_item]
						[/then]
					[/if]
					[if]
						[variable]
							name=unit.id
							equals=Wulfie
						[/variable]
						[then]
							{RTN_DIAL-02-050}
						[/then]
					[/if]
				[/command]
			[/option]

			[option]
				message={RTN_USTR-104}
				[command]
					[allow_undo]
					[/allow_undo]
				[/command]
			[/option]
		[/message]
    [/event]
#enddef

# ---------- Bridges building ------------
#define LSB_STARTBRIDGE_CMD UFILTER
	[command]
		[store_unit]
			variable=un
			[filter]
				{UFILTER}
				[filter_location]
					[filter_adjacent_location]
						x,y=$x1,$y1
					[/filter_adjacent_location]
				[/filter_location]
			[/filter]
		[/store_unit]
		[if]
			[variable] # controlling if builder is already busy
				name=un[0].moves
				equals=0
			[/variable]
			[then]
				{LSB_DIAL_W {RTN_USTR-163} } # uses variable un[] !
			[/then]
			
			[else] # build
			[item]
				x,y=$x1,$y1
				image="terrain/bridge/wood-dock-nw.png"
			[/item]
			[modify_unit]
				[filter]
					id=$un[0].id
				[/filter]
				moves=0
			[/modify_unit]
			[store_locations]
				x,y=$x1,$y1
				variable=tmp
			[/store_locations]
			
			# calc bridge orientation
			[set_variable]
				name=par
				value=$x1
			[/set_variable]
			[set_variable]
				name=par
				modulo=2
			[/set_variable]
			[set_variable]
				name=un[0].y
				add=$par
			[/set_variable]
			
			[if]
				[variable]
					name=un[0].x
					equals=$x1
				[/variable]
				[then]
					[set_variable]
						name=tmp.terrain
						value="$tmp.terrain^Bw|"
					[/set_variable]
				[/then]
				[else]
					[if]
						[variable]
							name=un[0].x
							less_than=$x1
						[/variable]
						[then]
						[if]
							[variable]
								name=un[0].y
								greater_than=$y1
							[/variable]
							[then]
								[set_variable]
									name=tmp.terrain
									value="$tmp.terrain^Bw/"
								[/set_variable]
							[/then]
							[else]
								[set_variable]
									name=tmp.terrain
									value="$tmp.terrain^Bw\"
								[/set_variable]
							[/else]
						[/if]					
						[/then]
						
						[else]
						[if]
							[variable]
								name=un[0].y
								greater_than=$y1
							[/variable]
							[then]
								[set_variable]
									name=tmp.terrain
									value="$tmp.terrain^Bw\"
								[/set_variable]
							[/then]
							[else]
								[set_variable]
									name=tmp.terrain
									value="$tmp.terrain^Bw/"
								[/set_variable]
							[/else]
						[/if]					
						[/else]
					[/if]
				[/else]
			[/if] # end calc
					
			[set_variables] # store future bridge terrain which shall appear next turn
				name=bridges
				[value]
					x=$tmp.x
					y=$tmp.y
					terrain=$tmp.terrain
				[/value]
				mode=append
			[/set_variables]
			
			[fire_event]
				name=start_bridges
			[/fire_event]
			
			[/else] # end build OK
		[/if]
		{CLEAR_VARIABLE un,par}		
	[/command]
#enddef

#define LSB_EVENT_BUILDBRIDGE
# 	[event]
#		name= new turn

	{FOREACH bridges i}  # ----------- bridges
		[remove_item]
			x,y=$bridges[$i].x,$bridges[$i].y
		[/remove_item]			
		[terrain]
			x,y=$bridges[$i].x,$bridges[$i].y
			terrain=$bridges[$i].terrain
		[/terrain]
	{NEXT i}
	{CLEAR_VARIABLE bridges}
#enddef

#------------- Building boats ---------------
#ifdef LSB_COMMENT
	----------- setup ----------
[scenario]
	[event]
		name=prestart
		{LSB_MENU_BUILDBOAT (race=Noelren) 2}
	[/event]
	
	{LSB_MANAGEBOATS (side=1) () ()}
	
	[event]
		name= side 1 turn refresh
		first_time_only=no
		{LSB_EVENT_BUILDBOAT}
	[/event]
	
	[event]
		name=victory
		{LSB_CLEARBOATS}
	[/event]
[/scenario]
#endif

# UFILTER: suf filtering units able to build boats
#define LSB_BUILDBOAT_CMD UFILTER
	[command]
		[store_unit]
			variable=un
			[filter]
				{UFILTER}
				[filter_location]
					[filter_adjacent_location]
						x,y=$x1,$y1
					[/filter_adjacent_location]
				[/filter_location]
			[/filter]
		[/store_unit]
		[if]
			[variable] # controlling if builder is already busy
				name=un[0].moves
				equals=0
			[/variable]
			[then]
				{LSB_DIAL_W {RTN_USTR-163} }
			[/then]
			
			[else] # build
				[item]
					x,y=$x1,$y1
					image=""units/Noelren/raft.png"~G(30)"
				[/item]
				[modify_unit]
					[filter]
						id=$un[0].id
					[/filter]
					moves=0
				[/modify_unit]
				[set_variables] # store future boats which will appear later
					name=boats
					mode=append
					[value]
						x=$x1
						y=$y1
#ifdef EASY
						count=2
#endif
#ifdef NORMAL
						count=3
#endif
#ifdef HARD
						count=4
#endif
						id=$boats_cnt
					[/value]
				[/set_variables]
				[set_variable]
					name=boats_cnt
					add=1
				[/set_variable]
				[fire_event]
					name=start_boats
				[/fire_event]

			[/else] # end build OK
		[/if]
		{CLEAR_VARIABLE un}		
	[/command]
#enddef

#define LSB_MANAGEBOATS ALLOWED_PASS CODEIN CODEOUT
# ALLOWED_PASS: a suf defining which units are allowed to board
# CODEIN: a code chunk to be executed when an unit comes on board
# CODEOUT: a code chunk to be executed when the boat discharges its passengers

# --- boats moves
	[event]
		name=moveto
		first_time_only=no
		[filter]
			type=Raft
			[filter_location]
				[filter_adjacent_location]
					[not]
						terrain=W*
					[/not]
				[/filter_adjacent_location]
			[/filter_location]
		[/filter]
		[store_locations]
			[not]
				terrain=W*
			[/not]
			[filter_adjacent_location]
				[filter]
					id=$unit.id
				[/filter]
			[/filter_adjacent_location]
			variable=rft
		[/store_locations]
		{FOREACH RF_$unit.id| n}
			[unstore_unit]
				variable=RF_$unit.id|[$n]
				x,y=$rft[0].x,$rft[0].y
				find_vacant=yes
			[/unstore_unit]			
		{NEXT n}
		[redraw][/redraw]
		[set_variable]
			name=$unit.id|_cnt
			value=0
		[/set_variable]
		{CODEOUT}
		{CLEAR_VARIABLE RF_$unit.id,rft}
    [/event]

# --- die event to kill passengers
	[event]
		name=die
		first_time_only= no
		[filter]
			side=1
			type=Raft
		[/filter]
		{FOREACH RF_$unit.id i} # test heroes death
			[if]
				[variable]
					name=RF_$unit.id|.status.isHero
					boolean_equals=yes
				[/variable]
				[then]
					[endlevel]
						result=defeat
					[/endlevel]
				[/then]
			[/if]
		{NEXT i}
		{CLEAR_VARIABLE RF_$unit.id}
	[/event]
	
# --- units boarding
	[event]
		name=moveto
		first_time_only=no
		[filter]
			{ALLOWED_PASS}
			[and]
				[filter_location]
					[filter_adjacent_location]
						[filter]
							type=Raft
						[/filter]
					[/filter_adjacent_location]
				[/filter_location]
			[/and]
			[and]
				[not]
					type=Raft
				[/not]
			[/and]
		[/filter]
		[store_unit]
			variable=rft
			[filter]
				type=Raft
				[filter_location]
					[filter_adjacent_location]
						[filter]
							id=$unit.id
						[/filter]
					[/filter_adjacent_location]
				[/filter_location]				
			[/filter]
		[/store_unit]
		
		[if]
			[variable]
				name=$rft.id|_cnt
#ifdef EASY
				less_than=8
#endif
#ifdef NORMAL
				less_than=6
#endif
#ifdef HARD
				less_than=4
#endif
			[/variable]
			[then]
				[if]
					[have_unit]
						id=$unit.id
						type=HorsemanA,Horseman,Knight,Lancer,Paladin,"Grand Knight",Cavalier,Cavalryman,Dragoon
					[/have_unit]
					[then]
						[set_variable]
							name=$rft.id|_cnt
							add=2
						[/set_variable]
					[/then][else]
						[set_variable]
							name=$rft.id|_cnt
							add=1
						[/set_variable]
					[/else]
				[/if]
				[store_unit]
					[filter]
						id=$unit.id
					[/filter]
					variable=RF_$rft.id
					mode=append
					kill=yes
				[/store_unit]
				{CODEIN}
			[/then][else]
				{RTN_DIAL-05-140}
			[/else]
		[/if]
    [/event]
#enddef

#define LSB_EVENT_BUILDBOAT
#	[event]
#		name= side 1 turn refresh

	{FOREACH_REV boats i}
		[set_variable]
			name=boats[$i].count
			add=-1
		[/set_variable]
		[if]
			[variable]
				name=boats[$i].count
				equals=0
			[/variable]
			[then]
				[remove_item]
					x,y=$boats[$i].x,$boats[$i].y
				[/remove_item]
				[unit]
					type=Raft
					id=Raft$boats[$i].id
					generate_name=no
					x,y=$boats[$i].x,$boats[$i].y
					side=1
					[modifications]
						{TRAIT_LOYAL}
					[/modifications]
				[/unit]
				[set_variable]
					name=Raft$boats[$i].id|_cnt
					value=0
				[/set_variable]
				{CLEAR_VARIABLE boats[$i]}
			[/then]
			[else]
				[if]
				[variable]
					name=boats[$i].count
					greater_than=0
				[/variable]
				[then]
					[store_unit]
						[filter]
							side=1
							[filter_location]
								[filter_adjacent_location]
									x,y=$boats[$i].x,$boats[$i].y
								[/filter_adjacent_location]
							[/filter_location]
						[/filter]
						variable=un
					[/store_unit]
					{FOREACH un j}
						[modify_unit]
							[filter]
								id=$un[$j].id
							[/filter]
							moves=0
						[/modify_unit]
					{NEXT j}
					{CLEAR_VARIABLE un}
				[/then][/if]
			[/else]
		[/if]
	{PREV i}		
#enddef

#define LSB_CLEARBOATS
# clear the boats
#   [event]
#        name=victory

	{FOREACH boats i}
		{CLEAR_VARIABLE Raft$boats[$i].id|_cnt}
		{CLEAR_VARIABLE RF_Raft$boats.id|}
	{NEXT i}
	{CLEAR_VARIABLE boats,boats_cnt}
#enddef

