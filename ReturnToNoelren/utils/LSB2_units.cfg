#textdomain wesnoth-ReturnToNoelren

#ifdef LSB_COMMENT
Here come the macros suitable for units

============= rev History ============
0.0.1 set-up
#endif

# ========================== Units manipulations =============================

#ifdef LSB_COMMENT
---------- LSB_MAKEHERO: add hero specifs to an unit
context: [unit]
#endif

#define LSB_MAKEHERO
		{IS_HERO}
		[status]
			isHero=yes
		[/status]
		[modifications]
			{TRAIT_LOYAL}
	   [/modifications]
#enddef

#ifdef LSB_COMMENT
---------- LSB_STOREPERSO ------------
# store an unit in a variable named after it's id
# ID the id
# KILL yes/no make it disappear or not
# {ID}_back : the variable created. Note: the 'kill' action don't fire the die event. 
 exemple:
	[unit]
		type=Wolfmonster
		id=Wulfie
		side=3
	[/unit]
	...
	{LSB_STOREPERSO Wulfie yes}
#endif

#define LSB_STOREPERSO ID KILL
	[store_unit]
		[filter]
			id={ID}
		[/filter]
		variable={ID}_back
		kill={KILL}
	[/store_unit]
#enddef

#ifdef LSB_COMMENT
---------- LSB_RECALLPERSO ------------
# unstore an unit from a variable named after it's id
# ID the id
# XY : the new position of the unit in the format (x,y=1,1). (optionnal) 
 exemple:
	{LSB_RECALLPERSO Wulfie ()}
#endif

#define LSB_RECALLPERSO ID XY
	[unstore_unit]
		variable={ID}_back
		find_vacant=yes
		{XY}
	[/unstore_unit]
#enddef

#ifdef LSB_COMMENT
---------- LSB_COPYUNIT FROM TO ------------
 copy an unit from a variable to another
 FROM: the source variable
 TO: the destination variable 
#endif

#define LSB_COPYUNIT FROM TO
	[store_unit]
		variable={TO}
		[filter]
			id=${FROM}.id
		[/filter]
		kill=no
	[/store_unit]
#enddef

#ifdef LSB_COMMENT
---------- LSB_RECALLANDHEAL ------------
# unstore an unit from a variable named after it's id
# ID the id
# XY : the new position of the unit in the format (x,y=1,1). (optionnal) 
 exemple:
	{LSB_RECALLANDHEAL Wulfie ()}
#endif
#define LSB_RECALLANDHEAL ID XY
	[set_variable]
		name={ID}_back.hitpoints
		value=${ID}_back.max_hitpoints
	[/set_variable]
	[set_variable]
		name={ID}_back.moves
		value=${ID}_back.max_moves
	[/set_variable]
	[unstore_unit]
		variable={ID}_back
		find_vacant=yes
		{XY}
	[/unstore_unit]
#enddef

#ifdef LSB_COMMENT
---------- LSB_RECALLUNIT ------------
# unstore an unit from the recall list
# FILTER: a SUF without tag [filter]
# XY : the new position of the unit in the format (x,y=1,1). (optionnal) 
 exemple:
	{LSB_RECALLUNIT id=Wulfie ()}
#endif
#define LSB_RECALLUNIT FILTER XY
	[recall]
		{FILTER}
		{XY}
	[/recall]
#enddef

#ifdef LSB_COMMENT
---------- LSB_RECALLFULL ------------
# unstore units from the recall list
# FILTER: a SUF without tag [filter]
# XY : the new position of the unit in the format (x,y=1,1). (optionnal) 
 exemple:
	{LSB_RECALLFULL 1 ()}
#endif
#define LSB_RECALLFULL SIDE PLACE
		[store_unit]
			[filter]
				side={SIDE}
				x,y=recall,recall
			[/filter]
			variable=t_temp
		[/store_unit]
		{FOREACH temp i}
			[recall]
				id=$t_temp[$i].id
				{PLACE}
			[/recall]
		{NEXT i}
		{CLEAR_VARIABLE t_temp}
#enddef

#ifdef LSB_COMMENT
 RTN_RESTARMY ARMY SIDE PLACE
# Restore an army stored in the variable ARMY, resetting hitpoints and moves.
# ARMY is the name of the variable
# PLACE is a (optionnal) location valid in [unstore_tag]

 example:
	{RTN_RESTARMY Ti_Army 1 ()} # recall these units at the same place they were stored.
#endif
#define RTN_RESTARMY ARMY SIDE PLACE
	{FOREACH {ARMY} k}
		[set_variable]
			name={ARMY}[$k].moves
			value=${ARMY}[$k].max_moves
		[/set_variable]
		[set_variable]
			name={ARMY}[$k].attacks_left
			value=${ARMY}[$k].max_attacks
		[/set_variable]
		[set_variable]
			name={ARMY}[$k].hitpoints
			value=${ARMY}[$k].max_hitpoints
		[/set_variable]
		[set_variable]
			name={ARMY}[$k].status.poisoned
			value=no
		[/set_variable]					
		[set_variable]
			name={ARMY}[$k].side
			value={SIDE}
		[/set_variable]					
	   [unstore_unit]
			variable={ARMY}[$k]
			{PLACE}
			find_vacant=yes
	   [/unstore_unit]
	{NEXT k}
#enddef

#ifdef LSB_COMMENT
 RTN_RESTLOYALARMY ARMY SIDE PLACE
# Restore an army stored in the variable ARMY, resetting hitpoints and moves and setting loyal.
# ARMY is the name of the variable
# PLACE is a (optionnal) location valid in [unstore_tag]

 example:
	{RTN_RESTLOYALARMY Ti_Army 1 ()} # recall these units at the same place they were stored.
#endif
#define RTN_RESTLOYALARMY ARMY SIDE PLACE
	{FOREACH {ARMY} k}
		[set_variable]
			name={ARMY}[$k].moves
			value=${ARMY}[$k].max_moves
		[/set_variable]
		[set_variable]
			name={ARMY}[$k].attacks_left
			value=${ARMY}[$k].max_attacks
		[/set_variable]
		[set_variable]
			name={ARMY}[$k].hitpoints
			value=${ARMY}[$k].max_hitpoints
		[/set_variable]
		[set_variable]
			name={ARMY}[$k].status.poisoned
			value=no
		[/set_variable]					
		[unstore_unit]
			variable={ARMY}[$k]
			{PLACE}
			find_vacant=yes
		[/unstore_unit]
		[modify_unit]
			[filter]
				id=${ARMY}[$k].id
			[/filter]
			side={SIDE}
			upkeep=loyal
			[modifications]
				{TRAIT_LOYAL}
			[/modifications]
			overlays="misc/loyal-icon.png"
		[/modify_unit]
	{NEXT k}
#enddef

# -------- Saves the side properties --------
#define LSB_SAVESIDE SIDE
	[store_gold]
		side={SIDE}
		variable=gold_{SIDE}
	[/store_gold]
	[store_villages]
		owner_side={SIDE}
		variable=villages_{SIDE}
	[/store_villages]
#enddef
		
# -------- And restore them --------
#define LSB_RESTORESIDE SIDE
	[modify_side]
		side={SIDE}
		gold=$gold_{SIDE}
	[/modify_side]
	[capture_village]
		side={SIDE}
		find_in=villages_{SIDE}
	[/capture_village]
	{CLEAR_VARIABLE gold_{SIDE},villages_{SIDE}}
#enddef

# =================== Units moves & manipulations =================

#ifdef LSB_COMMENT
	LSB_JOINTO
# Join an unit to another one.
# T_ID is target unit
# M_ID is moving unit

 exemple:
  Wulfie comes to Lestiviel
	{LSB_JOINTO Wulfie Lestiviel}
#endif
#define LSB_JOINTO M_ID T_ID
	[store_unit]
		[filter]
			id={T_ID}
		[/filter]
		variable={T_ID}tmp
	[/store_unit]
	[scroll_to_unit]
		[filter]
			id={T_ID}
		[/filter]
	[/scroll_to_unit]
	[move_unit]
		id={M_ID}
		to_x=${T_ID}tmp.x
		to_y=${T_ID}tmp.y
	[/move_unit]
	{CLEAR_VARIABLE {T_ID}tmp}
#enddef

#ifdef LSB_COMMENT
 LSB_AMBUSH
# Make an unit show and attack another one.
# Variable ATT_VAR must contain attacking unit
# IDVICT is attacked unit id
# OFFX,OFFY is the starting point of the move of attacking unit relative to attacked.

 exemple:
 Wulfie attacks Lestiviel from -6 -6
	[unit]
		type=Wolfmonster
		id=Wulfie
		side=3
		[modifications]
			{TRAIT_LOYAL}
	   [/modifications]
	   to_variable=Wolf
	[/unit]
	...
	{LSB_AMBUSH Lestiviel Wolf -6 -6}
#endif

#define LSB_AMBUSH IDVICT ATT_VAR OFFX OFFY
	[store_unit]
		[filter]
			id={IDVICT}
		[/filter]
		variable={IDVICT}tmp
	[/store_unit]
	[scroll_to_unit]
		[filter]
			id={IDVICT}
		[/filter]
	[/scroll_to_unit]
	[set_variable]
		name={IDVICT}tmp.x
		add={OFFX}
	[/set_variable]
	[set_variable]
		name={IDVICT}tmp.y
		add={OFFY}
	[/set_variable]
	[unstore_unit]
		variable={ATT_VAR}
		x,y=${IDVICT}tmp.x,${IDVICT}tmp.y
		find_vacant=yes
		text= {RTN_USTR-124}
		{COLOR_HARM}
	[/unstore_unit]
	[delay]
		time=1000
	[/delay]
	[set_variable]
		name={IDVICT}tmp.x
		sub={OFFX}
	[/set_variable]
	[set_variable]
		name={IDVICT}tmp.y
		sub={OFFY}
	[/set_variable]
	[move_unit]
		id=${ATT_VAR}.id
		to_x=${IDVICT}tmp.x
		to_y=${IDVICT}tmp.y
	[/move_unit]
	[animate_unit]
		flag=attack
		hits=yes
		[filter]
			id=${ATT_VAR}.id
		[/filter]
		[primary_attack]
			range=melee
		[/primary_attack]
	[/animate_unit]
	[delay]
		time=750
	[/delay]
	[animate_unit]
		flag=attack
		hits=yes
		[filter]
			id=${ATT_VAR}.id
		[/filter]
		[primary_attack]
			range=melee
		[/primary_attack]
	[/animate_unit]
	[delay]
		time=750
	[/delay]
	{CLEAR_VARIABLE {IDVICT}tmp}
#enddef

# ========================== Moves =============================

#ifdef LSB_COMMENT
 LSB_REGROUP
# Group units around the same point.
# GRP_FILT is a stduf to select the units to move
# X, Y is the point to move.

 example:
	{LSB_REGROUP side=2 12 17}
#endif
#define LSB_REGROUP GRP_FILT X Y
	[store_unit]
		[filter]
			{GRP_FILT}
		[/filter]
		variable=tmp
	[/store_unit]
	{FOREACH tmp indice}
		[move_unit]
			id=$tmp[$indice].id
			to_x={X}
			to_y={Y}
		[/move_unit]
	{NEXT indice}
	{CLEAR_VARIABLE tmp}
#enddef

# ---- Quick deplacement -----
#ifdef LSB_COMMENT
  These macro define the special group moving modes.
  1- The group moves following any of its member. Unit moves are refreshed
  2- Same as previous but an end turn is fired at the end of each move.
The group mode is disabled when enemies are too close, but this can be managed directly by setting G_depMode to 0
These macros use a set of variables which allow some tuning.
  - G_depMode: 0, 1, 2 . A status which states which dep mode is active.
  - G_depModeFilter: contains a standard unit filter (no filter tag) defining the group: example (side=1)
  - G_Radius: a radius value, stating when enemies are close enough to disable group mode.
#endif

# --- Macro enabling group dep mode ---
#define LSB_SETGROUP_DEP_MODE MODE
	[if]
		[variable]
			name=G_depMode
			equals=0
		[/variable]
	[then]
		[set_variable]
			name=G_depMode
			value={MODE}
		[/set_variable]
		[store_unit] # this 
			variable=tmpU
			[insert_tag]
				name=filter
				variable=G_depModeFilter
			[/insert_tag]
			kill=no
		[/store_unit]
		{FOREACH tmpU i}
			[modify_unit]
				[filter]
					id=$tmpU[$i].id
				[/filter]
				moves=$tmpU[$i].max_moves
			[/modify_unit]
		{NEXT i}
		{CLEAR_VARIABLE tmpU}
	[/then]
	[/if]
#enddef

# --- Manually disabling any group dep mode
#define LSB_CLEARGROUP_DEP_MODE
		{VARIABLE G_depMode 0} # this will stop group mode.
#enddef

# --- Macro setting the group filter ---
#define LSB_ENABLE_GROUP_DEP_MODE UFILTER
	[set_variable]  # set the group filter in a special variable.
		name=G_depModeFilter
		value={UFILTER}
	[/set_variable]
	{VARIABLE G_Radius 3} # set a default 
#enddef

# --- group dep mode 1 - This macro 'must' immediatly follow the 'prestart' event.
#define LSB_REGROUP_DEP_MODE_1 UFILTER
	[event]
		name=moveto
		first_time_only=no
		[filter]
			{UFILTER}
		[/filter]
		[filter_condition]
			[variable]
				name=G_depMode
				equals=1
			[/variable]
		[/filter_condition]
		[store_unit]
			variable=tmpU
			[filter]
				{UFILTER}
				[not]
					id=$unit.id
				[/not]
			[/filter]
			kill=no
		[/store_unit]
		{FOREACH tmpU i}
			[move_unit]
				id=$tmpU[$i].id
				to_x=$unit.x
				to_y=$unit.y
			[/move_unit]
		{NEXT i}
		{CLEAR_VARIABLE tmpU}
		[modify_unit]
			[filter]
				id=$unit.id
			[/filter]
			moves=$unit.max_moves
		[/modify_unit]
		[if] # detect enemies
			[have_unit]
				[filter_side]
					[enemy_of]
						side=1
					[/enemy_of]
				[/filter_side]
				[filter_location]
					x,y=$unit.x,$unit.y
					radius=$G_Radius
				[/filter_location]
			[/have_unit]
			[then]
				{LSB_CLEARGROUP_DEP_MODE}
				[fire_event]
					name=$G_event
				[/fire_event]
			[/then]
		[/if]
	[/event]
#enddef

# --- group dep mode 2 - This macro 'must' immediatly follow the 'prestart' event.
#define LSB_REGROUP_DEP_MODE_2 UFILTER
	[event]
		name=moveto
		first_time_only=no
		[filter]
			{UFILTER}
		[/filter]
		[filter_condition]
			[variable]
				name=G_depMode
				equals=2
			[/variable]
		[/filter_condition]
		[store_unit]
			variable=tmpU
			[filter]
				{UFILTER}
				[not]
					id=$unit.id
				[/not]
			[/filter]
			kill=no
		[/store_unit]
		{FOREACH tmpU i}
			[move_unit]
				id=$tmpU[$i].id
				to_x=$unit.x
				to_y=$unit.y
			[/move_unit]
		{NEXT i}
		{CLEAR_VARIABLE tmpU}
		[if] # detect enemies
			[have_unit]
				[filter_side]
					[enemy_of]
						side=1
					[/enemy_of]
				[/filter_side]
				[filter_location]
					x,y=$unit.x,$unit.y
					radius=$G_Radius
				[/filter_location]
			[/have_unit]
			[then]
				{LSB_CLEARGROUP_DEP_MODE}
				[fire_event]
					name=$G_event
				[/fire_event]
			[/then][else]
				[end_turn][/end_turn]
			[/else]
		[/if]
	[/event]
#enddef

#define LSB_HIDEINHOLES FILTER HOLES RESCUED FAR KILL
# Context: [event], NOTE: requires lua pack ([nearest_hex] and [find_path])
# FILTER: a stduf without [filter] tag (use parenthesis for complex filters)
# HOLES: a location array: the holes where the units will hide
# RESCUED: a variable name: hidden units will be stored here
# FAR: a limit (in turns). Units needing more than (FAR-1) turns to reach a hole will not be displaced.
# KILL: yes/no. Displaced units can be taken off or not

# Example: hides all side 1 humans in nearest villages
#		[store_locations]
#			variable=Villages
#			terrain=*^V*
#		[/store_locations]
#		{LSB_HIDEINHOLES (
#			side=1
#			race=human
#		) Villages Hidden 10 yes}

		{CLEAR_VARIABLE {RESCUED}}
		[store_unit]
			[filter]
				{FILTER}
				[filter_location]
					find_in={HOLES}
				[/filter_location]
			[/filter]
			variable={RESCUED}
			mode=append
			kill={KILL}					
		[/store_unit]
		
		[store_unit]
			[filter]
				{FILTER}
				[not]
					[filter_location]
						find_in={RESCUED}
					[/filter_location]
				[/not]
			[/filter]
			variable=moving
			kill=no
		[/store_unit]
		
		{FOREACH moving i}
			[nearest_hex]
				starting_x=$moving[$i].x
				starting_y=$moving[$i].y
				[filter_location]
					find_in={HOLES}
				[/filter_location]
				variable=lair
			[/nearest_hex]
			# --- calculate H + L
			[find_path]
				[traveler]
					id=$moving[$i].id
				[/traveler]
				[destination]
					find_in=lair
				[/destination]
				allow_multiple_turns=yes
				ignore_teleport=yes
				ignore_units=yes
			[/find_path]			
			[if]
				[variable]
					name=path.required_turns
					less_than={FAR}
				[/variable]
				[then]
				[move_unit]
					id=$moving[$i].id					
					to_x=$lair.x
					to_y=$lair.y
				[/move_unit]
				[store_unit]
					[filter]
						id=$moving[$i].id
					[/filter] 
					variable={RESCUED}
					mode=append
					kill={KILL}					
				[/store_unit]
				[/then]
			[/if]
			{CLEAR_VARIABLE lair}
			{CLEAR_VARIABLE path}
		{NEXT i}
		{CLEAR_VARIABLE moving}
#enddef

# ======================= units generation & destruction ====================

#ifdef LSB_COMMENT
 LSB_FIREUNITS
# Creates some random units in LOC place.
# TYPES is a list of unit types
# NUM is the number of units to create

 example:
	{LSB_FIREUNITS "Ghast,Chocobone" (placement=leader) 3 2}
#endif
#define LSB_FIREUNITS TYPES LOC NUM SIDE 
    [set_variables]
        name=t_table

        [split]
            list={TYPES}
            key=type
            separator=,
        [/split]
    [/set_variables]
    {VARIABLE howm {NUM}}

    [while]
        [variable]
            name=howm
            greater_than=0
        [/variable]

        [do]
            [set_variable]
                name=t_rnd
                rand=1..$t_table.length
            [/set_variable]
            {VARIABLE_OP t_rnd sub 1}

            [unit]
                type=$t_table[$t_rnd].type
                side={SIDE}
                {LOC}
                find_vacant=yes
            [/unit]

            {VARIABLE_OP howm sub 1}
        [/do]
    [/while]
	{CLEAR_VARIABLE howm,t_table,t_rnd}
#enddef

#ifdef LSB_COMMENT
 LSB_CREAGROUP
# Creates some units in LOC place.
# NUM is the number of units to create
# SIDE is the side

 example:
	{LSB_CREAGROUP Ghast (15,32) 3 1}
#endif
#define LSB_CREAGROUP TYPE LOC NUM SIDE
{REPEAT {NUM} (
	[unit]
		type={TYPE}
		side={SIDE}
		x,y={LOC}
		generate_name=yes
	[/unit]
	) }
#enddef

# ==================== Anims to incorporate into a type definition ====================

# _RIMG : reaction frame image
# _BIMG : base frame image
# _RSND : hit sound/soundlist
#define FLYING_DEFENSE_ANIM _RIMG _BIMG _RSND
    [defend]
        [if]
            hits=miss
            offset=0.0~-0.15,-0.15~0.0
        [/if]
        start_time=-126
        [frame]
            duration=1
            image={_BIMG}
        [/frame]
        [frame]
            duration=100
            image={_RIMG}
        [/frame]
        [if]
            hits=hit
            [frame]
                duration=150
                image={_RIMG}
                sound={_RSND}
            [/frame]
        [/if]
        [else]
            hits=miss,kill
            [frame]
                duration=150
                image={_RIMG}
            [/frame]
        [/else]
        [frame]
            duration=1
            image={_BIMG}
        [/frame]
    [/defend]
#enddef

#define LSB_DEFENSE_ANIM REACTION_IMAGE BASE_IMAGE HIT_SOUND
    # Define a defensive animation moving from a specified BASE_IMAGE
    # to REACTION_IMAGE, with HIT_SOUND playing only if a hit occurs and an
    # elven halo waxing and waning during the animation.
    [extra_anim]
		apply_to=tameOrPetrif
		start_time=0
        [frame]
            duration=50
            image={BASE_IMAGE}
            halo=halo/elven/elven-shield-halo-20pct.png
        [/frame]
        [frame]
            duration=50
            image={BASE_IMAGE}
            halo=halo/elven/elven-shield-halo-40pct.png
        [/frame]
        [frame]
            duration=100
            image={REACTION_IMAGE}
            halo=halo/elven/elven-shield-halo-60pct.png
        [/frame]
        [frame]
            duration=100
            image={REACTION_IMAGE}
            halo=halo/elven/elven-shield-halo-80pct.png
        [/frame]
        [if]
            hits=hit
            [frame]
                duration=200
                image={REACTION_IMAGE}
                sound={HIT_SOUND}
                halo=halo/elven/elven-shield-halo-100pct.png
            [/frame]
        [/if]
        [else]
            hits=miss,kill
            [frame]
                duration=200
                image={REACTION_IMAGE}
                halo=halo/elven/elven-shield-halo-100pct.png
            [/frame]
        [/else]
        [frame]
            duration=100
            image={REACTION_IMAGE}
            halo=halo/elven/elven-shield-halo-80pct.png
        [/frame]
        [frame]
            duration=50
            image={BASE_IMAGE}
            halo=halo/elven/elven-shield-halo-60pct.png
        [/frame]
        [frame]
            duration=50
            image={BASE_IMAGE}
            halo=halo/elven/elven-shield-halo-40pct.png
        [/frame]
        [frame]
            duration=50
            image={BASE_IMAGE}
            halo=halo/elven/elven-shield-halo-20pct.png
        [/frame]
    [/extra_anim]
#enddef